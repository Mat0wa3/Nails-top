import { c as createAstro, d as createComponent, r as renderTemplate, m as maybeRenderHead, s as spreadAttributes, f as renderComponent, j as addAttribute, l as Fragment, k as renderSlot, n as defineScriptVars } from '../astro_BSP7C2Di.mjs';
import 'kleur/colors';
import 'html-escaper';
import { $ as $$Image, a as $$Layout } from './SignIn_vrV9cuqT.mjs';
import 'clsx';
import '@astrojs/internal-helpers/path';
/* empty css                         */
import { O as OrderList } from './Facture_aK6ncybw.mjs';

const $$Astro$a = createAstro();
const $$ChevronLeft = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$a, $$props, $$slots);
  Astro2.self = $$ChevronLeft;
  return renderTemplate`${maybeRenderHead()}<svg${spreadAttributes(Astro2.props)} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"> <path stroke="none" d="M0 0h24v24H0z" fill="none"></path> <path d="M15 6l-6 6l6 6"></path> </svg>`;
}, "C:/Users/Admin/Documents/dev/Nails-top/src/icons/ChevronLeft.astro", void 0);

var __freeze$1 = Object.freeze;
var __defProp$1 = Object.defineProperty;
var __template$1 = (cooked, raw) => __freeze$1(__defProp$1(cooked, "raw", { value: __freeze$1(raw || cooked.slice()) }));
var _a$1;
const $$Astro$9 = createAstro();
const $$Calendar = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$9, $$props, $$slots);
  Astro2.self = $$Calendar;
  return renderTemplate(_a$1 || (_a$1 = __template$1(["", '<h4>Elige una fecha</h4> <section> <article class="calendar-header"> <p id="current-date">Marzo 2024</p> <input type="date" id="date" name="date" hidden> <div class="icons"> <span id="prev"> ', ' </span> <span id="next"> ', ' </span> </div> </article> <article class="calendar-body"> <ul id="weeks"> <li>Dom</li> <li>Lun</li> <li>Mar</li> <li>Mie</li> <li>Jue</li> <li>Vie</li> <li>S\xE1b</li> </ul> <ul id="days"></ul> </article> </section> <script defer>\n    let days;\n    const months = [\n        "Enero",\n        "Febrero",\n        "Marzo",\n        "Abril",\n        "Mayo",\n        "Junio",\n        "Julio",\n        "Agosto",\n        "Septiembre",\n        "Octubre",\n        "Noviembre",\n        "Diciembre",\n    ];\n\n    const currentDate = document.getElementById("current-date"),\n        daysTag = document.getElementById("days"),\n        prevNextIcon = document.querySelectorAll(".icons span");\n\n    let date = new Date(),\n    currentYear = date.getFullYear(),\n    currentMonth = date.getMonth(),\n    currentFullDate = date.toISOString().slice(0, 10);\n    document.getElementById("date").value = currentFullDate;\n\n    const renderButtons = () => {\n        days.forEach((day) => {\n            day.addEventListener("click", (e) => {\n                try{\n                    if (e.target.classList.contains("inactive")) return;\n                    const selectedDate = new Date(currentYear, currentMonth, e.target.innerText);\n                    const dateString = selectedDate.toISOString().slice(0, 10);\n                    document.getElementById("date").value = dateString;\n                    days.forEach((d) => {\n                        d.classList.remove("active");\n                    });\n                    e.target.classList.add("active");\n                } catch (error) {\n                    console.log(error);\n                }\n            });\n        });\n    }\n\n    const renderCalendar = () => {\n        let fistDayofMonth = new Date(currentYear, currentMonth, 1).getDay(),\n            lastDateofMonth = new Date(\n                currentYear,\n                currentMonth + 1,\n                0,\n            ).getDate(),\n            lastDateofLastMonth = new Date(\n                currentYear,\n                currentMonth,\n                0,\n            ).getDate();\n        let dayTag = "";\n\n        for (let i = fistDayofMonth; i > 0; i--) {\n            dayTag += `<li class="inactive">${lastDateofLastMonth - i + 1}</li>`;\n        }\n\n        for (let i = 1; i <= lastDateofMonth; i++) {\n            let isToday =\n                i == date.getDate() &&\n                currentMonth == new Date().getMonth() &&\n                currentYear == new Date().getFullYear()\n                    ? "active"\n                    : "";\n            dayTag += `<li value="${i}" class="${isToday}">${i}</li>`;\n        }\n\n        currentDate.innerText = `${months[currentMonth]} - ${currentYear}`;\n        daysTag.innerHTML = dayTag;\n\n        days = document.querySelectorAll("#days li");\n        renderButtons();\n    };\n\n    renderCalendar();\n\n    prevNextIcon.forEach((icon) => {\n        icon.addEventListener("click", () => {\n            currentMonth =\n                icon.id === "prev" ? currentMonth - 1 : currentMonth + 1;\n            if (currentMonth < 0 || currentMonth > 11) {\n                date = new Date(currentYear, currentMonth);\n                currentYear = date.getFullYear();\n                currentMonth = date.getMonth();\n            } else {\n                date = new Date();\n            }\n\n            renderCalendar();\n        });\n    });\n<\/script> <style>\n    section {\n        width: min(100%, 450px);\n        background-color: #fff;\n        border-radius: 10px;\n    }\n\n    .calendar-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 1rem 1.25rem 0;\n\n    }\n\n    .calendar-header #current-date {\n        font-size: 1.45rem;\n        font-weight: 500;\n    }\n\n    .calendar-header .icons {\n        display: flex;\n        gap: 0.5rem;\n    }\n\n    .calendar-header .icons span {\n        height: 30px;\n        width: 30px;\n        line-height: 30px;\n        background-color: #f2f2f2;\n        text-align: center;\n        cursor: pointer;\n        border-radius: 9999px;\n        transition: scale 0.2s ease;\n\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .calendar-header .icons span:hover {\n        scale: 1.1;\n    }\n\n    .calendar-body {\n        padding: 1rem;\n    }\n\n    .calendar-body ul {\n        display: flex;\n        flex-wrap: wrap;\n        list-style: none;\n        text-align: center;\n    }\n\n    .calendar-body #days li {\n        cursor: pointer;\n        margin: 10px 0;\n        padding: 10px;\n        z-index: 1;\n    }\n\n    .calendar-body #weeks li {\n        font-weight: 500;\n        margin-bottom: 20px;\n    }\n\n    .calendar-body ul li {\n        position: relative;\n        width: calc(100% / 7);\n    }\n\n    .calendar-body #days li::before {\n        position: absolute;\n        content: "";\n        left: 50%;\n        top: 50%;\n        height: 40px;\n        width: 40px;\n        z-index: -1;\n        border-radius: 9999px;\n        transform: translate(-50%, -50%);\n    }\n\n    .rotate-180 {\n        transform: rotate(180deg);\n    }\n\n    #days li:hover::before {\n        background-color: #f2f2f2;\n    }\n\n    #days li.inactive {\n        color: #aaa;\n    }\n\n    #days li.active {\n        color: #fff;\n    }\n\n    #days li.active::before {\n        background-color: #27abe2;\n    }\n</style>'], ["", '<h4>Elige una fecha</h4> <section> <article class="calendar-header"> <p id="current-date">Marzo 2024</p> <input type="date" id="date" name="date" hidden> <div class="icons"> <span id="prev"> ', ' </span> <span id="next"> ', ' </span> </div> </article> <article class="calendar-body"> <ul id="weeks"> <li>Dom</li> <li>Lun</li> <li>Mar</li> <li>Mie</li> <li>Jue</li> <li>Vie</li> <li>S\xE1b</li> </ul> <ul id="days"></ul> </article> </section> <script defer>\n    let days;\n    const months = [\n        "Enero",\n        "Febrero",\n        "Marzo",\n        "Abril",\n        "Mayo",\n        "Junio",\n        "Julio",\n        "Agosto",\n        "Septiembre",\n        "Octubre",\n        "Noviembre",\n        "Diciembre",\n    ];\n\n    const currentDate = document.getElementById("current-date"),\n        daysTag = document.getElementById("days"),\n        prevNextIcon = document.querySelectorAll(".icons span");\n\n    let date = new Date(),\n    currentYear = date.getFullYear(),\n    currentMonth = date.getMonth(),\n    currentFullDate = date.toISOString().slice(0, 10);\n    document.getElementById("date").value = currentFullDate;\n\n    const renderButtons = () => {\n        days.forEach((day) => {\n            day.addEventListener("click", (e) => {\n                try{\n                    if (e.target.classList.contains("inactive")) return;\n                    const selectedDate = new Date(currentYear, currentMonth, e.target.innerText);\n                    const dateString = selectedDate.toISOString().slice(0, 10);\n                    document.getElementById("date").value = dateString;\n                    days.forEach((d) => {\n                        d.classList.remove("active");\n                    });\n                    e.target.classList.add("active");\n                } catch (error) {\n                    console.log(error);\n                }\n            });\n        });\n    }\n\n    const renderCalendar = () => {\n        let fistDayofMonth = new Date(currentYear, currentMonth, 1).getDay(),\n            lastDateofMonth = new Date(\n                currentYear,\n                currentMonth + 1,\n                0,\n            ).getDate(),\n            lastDateofLastMonth = new Date(\n                currentYear,\n                currentMonth,\n                0,\n            ).getDate();\n        let dayTag = "";\n\n        for (let i = fistDayofMonth; i > 0; i--) {\n            dayTag += \\`<li class="inactive">\\${lastDateofLastMonth - i + 1}</li>\\`;\n        }\n\n        for (let i = 1; i <= lastDateofMonth; i++) {\n            let isToday =\n                i == date.getDate() &&\n                currentMonth == new Date().getMonth() &&\n                currentYear == new Date().getFullYear()\n                    ? "active"\n                    : "";\n            dayTag += \\`<li value="\\${i}" class="\\${isToday}">\\${i}</li>\\`;\n        }\n\n        currentDate.innerText = \\`\\${months[currentMonth]} - \\${currentYear}\\`;\n        daysTag.innerHTML = dayTag;\n\n        days = document.querySelectorAll("#days li");\n        renderButtons();\n    };\n\n    renderCalendar();\n\n    prevNextIcon.forEach((icon) => {\n        icon.addEventListener("click", () => {\n            currentMonth =\n                icon.id === "prev" ? currentMonth - 1 : currentMonth + 1;\n            if (currentMonth < 0 || currentMonth > 11) {\n                date = new Date(currentYear, currentMonth);\n                currentYear = date.getFullYear();\n                currentMonth = date.getMonth();\n            } else {\n                date = new Date();\n            }\n\n            renderCalendar();\n        });\n    });\n<\/script> <style>\n    section {\n        width: min(100%, 450px);\n        background-color: #fff;\n        border-radius: 10px;\n    }\n\n    .calendar-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 1rem 1.25rem 0;\n\n    }\n\n    .calendar-header #current-date {\n        font-size: 1.45rem;\n        font-weight: 500;\n    }\n\n    .calendar-header .icons {\n        display: flex;\n        gap: 0.5rem;\n    }\n\n    .calendar-header .icons span {\n        height: 30px;\n        width: 30px;\n        line-height: 30px;\n        background-color: #f2f2f2;\n        text-align: center;\n        cursor: pointer;\n        border-radius: 9999px;\n        transition: scale 0.2s ease;\n\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .calendar-header .icons span:hover {\n        scale: 1.1;\n    }\n\n    .calendar-body {\n        padding: 1rem;\n    }\n\n    .calendar-body ul {\n        display: flex;\n        flex-wrap: wrap;\n        list-style: none;\n        text-align: center;\n    }\n\n    .calendar-body #days li {\n        cursor: pointer;\n        margin: 10px 0;\n        padding: 10px;\n        z-index: 1;\n    }\n\n    .calendar-body #weeks li {\n        font-weight: 500;\n        margin-bottom: 20px;\n    }\n\n    .calendar-body ul li {\n        position: relative;\n        width: calc(100% / 7);\n    }\n\n    .calendar-body #days li::before {\n        position: absolute;\n        content: "";\n        left: 50%;\n        top: 50%;\n        height: 40px;\n        width: 40px;\n        z-index: -1;\n        border-radius: 9999px;\n        transform: translate(-50%, -50%);\n    }\n\n    .rotate-180 {\n        transform: rotate(180deg);\n    }\n\n    #days li:hover::before {\n        background-color: #f2f2f2;\n    }\n\n    #days li.inactive {\n        color: #aaa;\n    }\n\n    #days li.active {\n        color: #fff;\n    }\n\n    #days li.active::before {\n        background-color: #27abe2;\n    }\n</style>'])), maybeRenderHead(), renderComponent($$result, "ChevronIcon", $$ChevronLeft, {}), renderComponent($$result, "ChevronIcon", $$ChevronLeft, { "class:list": { "rotate-180": true } }));
}, "C:/Users/Admin/Documents/dev/Nails-top/src/components/Calendar.astro", void 0);

const $$Astro$8 = createAstro();
const $$ServiceCheckbox = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$8, $$props, $$slots);
  Astro2.self = $$ServiceCheckbox;
  const { id, name, value, price, img, status } = Astro2.props;
  return renderTemplate`${status === "disabled" && renderTemplate`${renderComponent($$result, "Fragment", Fragment, { "data-astro-cid-24mobdr7": true }, { "default": ($$result2) => renderTemplate`${maybeRenderHead()}<input${addAttribute(id, "id")} class="disabled" type="checkbox"${addAttribute(name, "name")}${addAttribute(value, "value")} disabled data-astro-cid-24mobdr7><label${addAttribute(id, "for")} class="disabled" data-astro-cid-24mobdr7>${renderComponent($$result2, "Image", $$Image, { "src": img, "width": 200, "height": 200, "alt": "servicio", "loading": "eager", "data-astro-cid-24mobdr7": true })}<h4 data-astro-cid-24mobdr7>${value}</h4>${price && renderTemplate`<p data-astro-cid-24mobdr7>$${price.toLocaleString()}</p>`}</label>` })}` || renderTemplate`${renderComponent($$result, "Fragment", Fragment, { "data-astro-cid-24mobdr7": true }, { "default": ($$result2) => renderTemplate`<input${addAttribute(id, "id")} type="checkbox"${addAttribute(name, "name")}${addAttribute(value, "value")}${addAttribute(`${price}`, "class")} data-astro-cid-24mobdr7><label${addAttribute(id, "for")} data-astro-cid-24mobdr7>${renderComponent($$result2, "Image", $$Image, { "src": img, "width": 200, "height": 200, "alt": "servicio", "loading": "eager", "data-astro-cid-24mobdr7": true })}<h4 data-astro-cid-24mobdr7>${value}</h4>${price && renderTemplate`<p data-astro-cid-24mobdr7>$${price.toLocaleString()}</p>`}</label>` })}`}`;
}, "C:/Users/Admin/Documents/dev/Nails-top/src/components/ServiceCheckbox.astro", void 0);

const $$Astro$7 = createAstro();
const $$FormServices = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$7, $$props, $$slots);
  Astro2.self = $$FormServices;
  const PRODUCTS = [
    { id: "0", name: "Pedicura tradicional", price: 18e3 },
    { id: "1", name: "Manicura tradicional", price: 15e3 },
    { id: "2", name: "Pedicura semipermanente", price: 35e3 },
    { id: "3", name: "Manicura semipermanente", price: 35e3 },
    { id: "4", name: "Press on", price: 7e4 },
    { id: "5", name: "Forrado en acrilico", price: 45e3 },
    { id: "6", name: "Retiro de acrilico", price: 15e3 },
    { id: "7", name: "Retiro de semipermanentemente", price: 8e3 },
    { id: "8", name: "Pies y manos tradicional", price: 33e3 },
    { id: "9", name: "Pies y manos semipermanente", price: 7e4 },
    { id: "10", name: "Pedi spa", price: 3e4 },
    { id: "11", name: "Retoque Press on", price: 55e3 },
    { id: "12", name: "Base ruber", price: 45e3 },
    { id: "13", name: "Forrado con polygel", price: 5e4 }
  ];
  const { id } = Astro2.props;
  return renderTemplate`${maybeRenderHead()}<section${addAttribute(id, "id")} data-astro-cid-ij5zonff> <h4 data-astro-cid-ij5zonff>Elige tus servicios</h4> <div class="servicesList" data-astro-cid-ij5zonff> ${PRODUCTS.map((product) => renderTemplate`<div class="services" data-astro-cid-ij5zonff> ${renderComponent($$result, "ServiceCheckbox", $$ServiceCheckbox, { "id": product.id, "name": "service", "value": product.name, "price": product.price, "img": "/BG.jpg", "data-astro-cid-ij5zonff": true })} </div>`)} <div class="services" data-astro-cid-ij5zonff> ${renderComponent($$result, "ServiceCheckbox", $$ServiceCheckbox, { "id": "next", "name": "Proximamente", "value": "Proximamente", "img": "/BG.jpg", "status": "disabled", "data-astro-cid-ij5zonff": true })} </div> </div> </section> `;
}, "C:/Users/Admin/Documents/dev/Nails-top/src/components/FormServices.astro", void 0);

const $$Astro$6 = createAstro();
const $$SelectList = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$6, $$props, $$slots);
  Astro2.self = $$SelectList;
  const { id, name, placeholder } = Astro2.props;
  return renderTemplate`${maybeRenderHead()}<select${addAttribute(name, "name")}${addAttribute(id, "id")} required data-astro-cid-ry7jm6uv> <option value="" selected data-astro-cid-ry7jm6uv>${placeholder}</option> ${renderSlot($$result, $$slots["default"])} </select> `;
}, "C:/Users/Admin/Documents/dev/Nails-top/src/components/SelectList.astro", void 0);

const $$Astro$5 = createAstro();
const $$InputField = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$5, $$props, $$slots);
  Astro2.self = $$InputField;
  const { id, type, placeholder } = Astro2.props;
  return renderTemplate`${maybeRenderHead()}<label data-astro-cid-at2cjfen> ${renderSlot($$result, $$slots["default"])} <div class="input" data-astro-cid-at2cjfen> <span data-astro-cid-at2cjfen>${renderSlot($$result, $$slots["icon"])}</span> <input${addAttribute(type, "type")}${addAttribute(id, "id")}${addAttribute(id, "name")}${addAttribute(placeholder, "placeholder")} required data-astro-cid-at2cjfen> </div> </label> `;
}, "C:/Users/Admin/Documents/dev/Nails-top/src/components/InputField.astro", void 0);

const $$Astro$4 = createAstro();
const $$User = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$4, $$props, $$slots);
  Astro2.self = $$User;
  return renderTemplate`${maybeRenderHead()}<svg${spreadAttributes(Astro2.props)} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"> <path stroke="none" d="M0 0h24v24H0z" fill="none"></path> <path d="M8 7a4 4 0 1 0 8 0a4 4 0 0 0 -8 0"></path> <path d="M6 21v-2a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v2"></path> </svg>`;
}, "C:/Users/Admin/Documents/dev/Nails-top/src/icons/user.astro", void 0);

const $$Astro$3 = createAstro();
const $$Phone = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$3, $$props, $$slots);
  Astro2.self = $$Phone;
  return renderTemplate`${maybeRenderHead()}<svg${spreadAttributes(Astro2.props)} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"> <path stroke="none" d="M0 0h24v24H0z" fill="none"></path> <path d="M5 4h4l2 5l-2.5 1.5a11 11 0 0 0 5 5l1.5 -2.5l5 2v4a2 2 0 0 1 -2 2a16 16 0 0 1 -15 -15a2 2 0 0 1 2 -2"></path> </svg>`;
}, "C:/Users/Admin/Documents/dev/Nails-top/src/icons/phone.astro", void 0);

const $$Astro$2 = createAstro();
const $$UserForm = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$2, $$props, $$slots);
  Astro2.self = $$UserForm;
  return renderTemplate`${maybeRenderHead()}<section data-astro-cid-xnjxe6wi> ${renderComponent($$result, "InputField", $$InputField, { "id": "name", "placeholder": "ej: Andrea Zapata", "type": "text", "data-astro-cid-xnjxe6wi": true }, { "default": ($$result2) => renderTemplate`
Ingresa tu nombre
 `, "icon": ($$result2) => renderTemplate`${renderComponent($$result2, "UserIcon", $$User, { "slot": "icon", "data-astro-cid-xnjxe6wi": true })}` })} ${renderComponent($$result, "InputField", $$InputField, { "id": "phone", "placeholder": "3003333333", "type": "text", "data-astro-cid-xnjxe6wi": true }, { "default": ($$result2) => renderTemplate`
Ingresa tu celular
 `, "icon": ($$result2) => renderTemplate`${renderComponent($$result2, "PhoneIcon", $$Phone, { "slot": "icon", "data-astro-cid-xnjxe6wi": true })}` })} </section> `;
}, "C:/Users/Admin/Documents/dev/Nails-top/src/components/UserForm.astro", void 0);

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro$1 = createAstro();
const $$DateForm = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$1, $$props, $$slots);
  Astro2.self = $$DateForm;
  const ORDERS = await OrderList();
  return renderTemplate(_a || (_a = __template(["", '<form class="section-container" method="post" data-astro-cid-zgcf63k7> <section class="section-header" data-astro-cid-zgcf63k7> <h2 data-astro-cid-zgcf63k7>Ordena tu cita</h2> </section> <section class="section-body" data-astro-cid-zgcf63k7> <label for="manicurista" data-astro-cid-zgcf63k7>\xBFCon qui\xE9n quieres la cita?</label> ', " ", " ", " <h4 data-astro-cid-zgcf63k7>Elige una hora</h4> ", " ", ' <button class="btn" data-astro-cid-zgcf63k7>Agendar</button> </section> </form> <script>(function(){', '\n    const btn = document.querySelector(".btn");\n    const form = document.querySelector("form");\n    const manicurista = document.getElementById("manicurista");\n    const hour = document.getElementById("time");\n    const name = document.getElementById("name");\n    const phone = document.getElementById("phone");\n    const checkBoxes = document.querySelectorAll("input[name=service]");\n    btn.addEventListener("click", async (e) => {\n        e.preventDefault();\n        const atLeastOneChecked = [...checkBoxes].some((c) => c.checked);\n        const services = document.getElementsByName("service");\n        if (manicurista.value === "") {\n            alert("Selecciona un manicurista");\n            window.location.href = "#top";\n            return;\n        }\n        if (!atLeastOneChecked) {\n            alert(`Selecciona al menos un servicio`);\n            window.location.href = "#services";\n            return;\n        }\n        if (hour.value === "") {\n            alert("Selecciona una hora");\n            hour.focus();\n            return;\n        }\n        if (name.value === "") {\n            alert("Ingresa tu nombre");\n            name.focus();\n            return;\n        }\n        if (phone.value === "") {\n            alert("Ingresa tu celular");\n            phone.focus();\n            return;\n        }\n\n        const formData = new FormData(form);\n        const order = {\n            services: [],\n            date: "",\n            time: "",\n            name: "",\n            phone: "",\n            manicurista: "",\n            status: "Pendiente",\n            total: 0,\n        };\n\n        const objectDate = formData.get("date");\n        const objectTime = formData.get("time");\n        const objectName = formData.get("name");\n        const objectPhone = formData.get("phone");\n        const objectManicurista = formData.get("manicurista");\n\n        services.forEach((s) => {\n            if (s.checked) {\n                order.services.push({\n                    id: s.id,\n                    name: s.value,\n                    price: Number(s.className),\n                });\n                order.total += Number(s.className);\n            }\n        });\n\n        order.date = objectDate;\n        order.time = objectTime;\n        order.name = objectName;\n        order.phone = objectPhone;\n        order.manicurista = objectManicurista;\n\n        let dated = false;\n\n        ORDERS.forEach((o) => {\n            if (\n                o.date === objectDate &&\n                o.time === objectTime &&\n                o.manicurista === objectManicurista\n            ) {\n                dated = true;\n            }\n            return dated;\n        });\n\n        if (dated) {\n            alert(\n                "Ya hay una cita agendada a esta hora y fecha con este manicurista",\n            );\n            window.location.href = "#top";\n            return;\n        } else {\n            try {\n                await fetch("/api/orders", {\n                    method: "POST",\n                    headers: {\n                        "Content-Type": "application/json",\n                    },\n                    body: JSON.stringify(order),\n                });\n                alert("Orden registrada");\n                window.location.href = "/";\n            } catch (error) {\n                console.error(error);\n            }\n        }\n    });\n})();<\/script> '], ["", '<form class="section-container" method="post" data-astro-cid-zgcf63k7> <section class="section-header" data-astro-cid-zgcf63k7> <h2 data-astro-cid-zgcf63k7>Ordena tu cita</h2> </section> <section class="section-body" data-astro-cid-zgcf63k7> <label for="manicurista" data-astro-cid-zgcf63k7>\xBFCon qui\xE9n quieres la cita?</label> ', " ", " ", " <h4 data-astro-cid-zgcf63k7>Elige una hora</h4> ", " ", ' <button class="btn" data-astro-cid-zgcf63k7>Agendar</button> </section> </form> <script>(function(){', '\n    const btn = document.querySelector(".btn");\n    const form = document.querySelector("form");\n    const manicurista = document.getElementById("manicurista");\n    const hour = document.getElementById("time");\n    const name = document.getElementById("name");\n    const phone = document.getElementById("phone");\n    const checkBoxes = document.querySelectorAll("input[name=service]");\n    btn.addEventListener("click", async (e) => {\n        e.preventDefault();\n        const atLeastOneChecked = [...checkBoxes].some((c) => c.checked);\n        const services = document.getElementsByName("service");\n        if (manicurista.value === "") {\n            alert("Selecciona un manicurista");\n            window.location.href = "#top";\n            return;\n        }\n        if (!atLeastOneChecked) {\n            alert(\\`Selecciona al menos un servicio\\`);\n            window.location.href = "#services";\n            return;\n        }\n        if (hour.value === "") {\n            alert("Selecciona una hora");\n            hour.focus();\n            return;\n        }\n        if (name.value === "") {\n            alert("Ingresa tu nombre");\n            name.focus();\n            return;\n        }\n        if (phone.value === "") {\n            alert("Ingresa tu celular");\n            phone.focus();\n            return;\n        }\n\n        const formData = new FormData(form);\n        const order = {\n            services: [],\n            date: "",\n            time: "",\n            name: "",\n            phone: "",\n            manicurista: "",\n            status: "Pendiente",\n            total: 0,\n        };\n\n        const objectDate = formData.get("date");\n        const objectTime = formData.get("time");\n        const objectName = formData.get("name");\n        const objectPhone = formData.get("phone");\n        const objectManicurista = formData.get("manicurista");\n\n        services.forEach((s) => {\n            if (s.checked) {\n                order.services.push({\n                    id: s.id,\n                    name: s.value,\n                    price: Number(s.className),\n                });\n                order.total += Number(s.className);\n            }\n        });\n\n        order.date = objectDate;\n        order.time = objectTime;\n        order.name = objectName;\n        order.phone = objectPhone;\n        order.manicurista = objectManicurista;\n\n        let dated = false;\n\n        ORDERS.forEach((o) => {\n            if (\n                o.date === objectDate &&\n                o.time === objectTime &&\n                o.manicurista === objectManicurista\n            ) {\n                dated = true;\n            }\n            return dated;\n        });\n\n        if (dated) {\n            alert(\n                "Ya hay una cita agendada a esta hora y fecha con este manicurista",\n            );\n            window.location.href = "#top";\n            return;\n        } else {\n            try {\n                await fetch("/api/orders", {\n                    method: "POST",\n                    headers: {\n                        "Content-Type": "application/json",\n                    },\n                    body: JSON.stringify(order),\n                });\n                alert("Orden registrada");\n                window.location.href = "/";\n            } catch (error) {\n                console.error(error);\n            }\n        }\n    });\n})();<\/script> '])), maybeRenderHead(), renderComponent($$result, "SelectList", $$SelectList, { "id": "manicurista", "name": "manicurista", "placeholder": "Selecciona", "data-astro-cid-zgcf63k7": true }, { "default": ($$result2) => renderTemplate` <option value="Laura" data-astro-cid-zgcf63k7>Laura</option> <option value="Daniela" data-astro-cid-zgcf63k7>Daniela</option> <option value="First" data-astro-cid-zgcf63k7>No tengo preferencia</option> ` }), renderComponent($$result, "FormServices", $$FormServices, { "id": "services", "data-astro-cid-zgcf63k7": true }), renderComponent($$result, "Calendar", $$Calendar, { "data-astro-cid-zgcf63k7": true }), renderComponent($$result, "SelectList", $$SelectList, { "id": "time", "name": "time", "placeholder": "Selecciona", "data-astro-cid-zgcf63k7": true }, { "default": ($$result2) => renderTemplate` <optgroup label="AM" data-astro-cid-zgcf63k7> <option value="10:00" data-astro-cid-zgcf63k7>10:00</option> <option value="11:00" data-astro-cid-zgcf63k7>11:00</option> <option value="12:00" data-astro-cid-zgcf63k7>12:00</option> </optgroup> <optgroup label="PM" data-astro-cid-zgcf63k7> <option value="13:00" data-astro-cid-zgcf63k7>1:00</option> <option value="14:00" data-astro-cid-zgcf63k7>2:00</option> <option value="15:00" data-astro-cid-zgcf63k7>3:00</option> <option value="16:00" data-astro-cid-zgcf63k7>4:00</option> <option value="17:00" data-astro-cid-zgcf63k7>5:00</option> <option value="18:00" data-astro-cid-zgcf63k7>6:00</option> </optgroup> ` }), renderComponent($$result, "UserForm", $$UserForm, { "data-astro-cid-zgcf63k7": true }), defineScriptVars({ ORDERS }));
}, "C:/Users/Admin/Documents/dev/Nails-top/src/components/DateForm.astro", void 0);

const $$Astro = createAstro();
const $$Date = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Date;
  return renderTemplate`${renderComponent($$result, "Layout", $$Layout, { "title": "Nails-top - Citas", "data-astro-cid-o4f7jc6w": true }, { "default": ($$result2) => renderTemplate` ${maybeRenderHead()}<main class="container" data-astro-cid-o4f7jc6w> ${renderComponent($$result2, "DateForm", $$DateForm, { "data-astro-cid-o4f7jc6w": true })} </main> ` })} `;
}, "C:/Users/Admin/Documents/dev/Nails-top/src/pages/user/date.astro", void 0);

const $$file = "C:/Users/Admin/Documents/dev/Nails-top/src/pages/user/date.astro";
const $$url = "/user/date";

export { $$Date as default, $$file as file, $$url as url };
