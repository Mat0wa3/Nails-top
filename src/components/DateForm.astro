---
const PRODUCTS = [
    { id: 0, name: 'Pedicura tradicional', price: 18000 },
    { id: 1, name: 'Manicura tradicional', price: 15000 },
    { id: 2, name: 'Pedicura semipermanente', price: 35000 },
    { id: 3, name: 'Manicura semipermanente', price: 35000 },
    { id: 4, name: 'Press on', price: 70000 },
    { id: 5, name: 'Forrado en acrilico', price: 45000 },
    { id: 6, name: 'Retiro de acrilico', price: 15000 },
    { id: 7, name: 'Retiro de semipermanentemente', price: 8000 },
    { id: 8, name: 'Pies y manos tradicional', price: 33000 },
    { id: 9, name: 'Pies y manos semipermanente', price: 70000 },
    { id: 10, name: 'Pedi spa', price: 30000 },
    { id: 11, name: 'Retoque Press on', price: 55000 },
    { id: 12, name: 'Base ruber', price: 45000 },
    { id: 13, name: 'Forrado con polygel', price: 50000 },
]
 
import Calendar from "./Calendar.astro";
import FormServices from "./FormServices.astro";
import SelectList from "./SelectList.astro";
import UserForm from "./UserForm.astro";
import Button from "./Button.astro";
 
import { createOrder } from "@/db/orders";
import { Orders } from "@/db/mongodb";
 
const errors = { name: "" }
const message = { name: "" }
 
if (Astro.request.method === "POST") {
    try {
        const body = await Astro.request.formData();
    
        const order: any = {
            name: body.get("name"),
            phone: body.get("phone"),
            services: [],
            date: body.get("date"),
            time: body.get("time"),
            status: "Pendiente",
            manicurista: body.get("manicurista"),
            total: 0,
        };
 
        const services = body.getAll("service");
 
        for (const service of services) {
            order.services.push({
                id: PRODUCTS[Number(service)].id,
                name: PRODUCTS[Number(service)].name,
                price: PRODUCTS[Number(service)].price,
            });
            order.total += PRODUCTS[Number(service)].price;
        }
 
        const orders = await Orders();
 
        let order_exist = await orders.findOne({ date: order.date, time: order.time, manicurista: order.manicurista });
 
        if (!order_exist) {
            await createOrder(order);
 
            Astro.response.statusText = "ok";
            Astro.response.status = 200
 
            message.name += "Cita creada!"
 
        }
 
        if (order_exist) errors.name += "Ya existe una cita para ese horario!"
 
    } catch (error) {
        console.error(error);
    }
} 
 
---

<form method="post">
    { message.name ? <p class="success">{message.name}</p> : null }
    { errors.name ? <p class="error">{errors.name}</p> : null }
    <section>
        <SelectList id="manicurista" name="manicurista" placeholder="Elige tu manicurista">
            <option value="Laura">Laura</option>
            <option value="Daniela">Daniela</option>
        </SelectList>
        <FormServices id="services" />
        <Calendar />
        <SelectList id="time" name="time" placeholder="Elige la hora">
            <optgroup label="AM">
                <option value="10:00">10:00</option>
                <option value="11:00">11:00</option>
                <option value="12:00">12:00</option>
            </optgroup>
            <optgroup label="PM">
                <option value="13:00">1:00</option>
                <option value="14:00">2:00</option>
                <option value="15:00">3:00</option>
                <option value="16:00">4:00</option>
                <option value="17:00">5:00</option>
                <option value="18:00">6:00</option>
            </optgroup>
        </SelectList>
        <UserForm />
        <div class="btn">
            <Button>Agendar</Button>
        </div>
    </section>
</form>

<style>

    form {
        background-color: #fff5;
        border-radius: 10px;
        padding: 20px;
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    section {
        text-align: center;

        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 20px;
    }

    .error {
        color: red;
        font-size: 1.4rem;
        font-weight: 700;
        text-align: center;
    }

    .success {
        color: green;
        font-size: 1.4rem;
        font-weight: 700;
        text-align: center;
    }

    .btn {
        align-self: flex-end;
    }
</style>